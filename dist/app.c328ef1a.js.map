{"version":3,"sources":["szyfrcezara.js","app.js"],"names":["result","caesar13","sentence","alphabet","console","log"],"mappings":";;ACAA;;AAEAI,OAAO,CAACC,GAAR,CAAYJ,qBAAZ;;;ADFA;;;;;;;;;;;;;;;;;;;;;;;AAyBA,IAAMD,MAAM,GAAG,kBAAf;;AACO,SAASC,QAAT,CAAkBC,QAAlB,EAA4B;AAC/B,MAAMC,QAAQ,GAAG,oDAAjB;AACAC,EAAAA,OAAO,CAACC,GAAR,CAAYH,QAAZ;AACH;;AAAA;AAEDD,QAAQ,CAAC,kBAAD,CAAR","file":"app.c328ef1a.js","sourceRoot":"..","sourcesContent":["/*\r\nProjekt praktyczny “Szyfr Cezara”\r\n// Szyfr Cezara (szyfr przesuwający) to prosta i popularna technika szyfrowania danych.  \r\n// Opiera się o przesunięcie liter w Alfabecie (obecnie używa się przesunięcia o 13 liter - ROT13).\r\n\r\n// Opis zadania: \r\n\r\n// Stwórz moduł eksportujący z pomocą ES6 Modules funkcję caesar13. Jako parametr funkcja ta ma\r\n// przyjmować ciąg znaków a następnie zwracać zaszyfrowany zgodnie z ROT13. Wykorzystaj powyższy\r\n// przykład działania aby zweryfikować poprawność Twojej funkcji.\r\n\r\n// Wymagania: \r\n\r\n// Po ukończeniu, funkcja ma spełniać następujące wymagania:\r\n\r\n// 1. Funkcja caesar13 ma zwracać zaszyfrowany ciąg znaków, przesunięty o 13 liter (bez polskich znaków).\r\n\r\n// 2. Liczby w ciągu znaków mają nie ulegać zmianie.\r\n\r\n// 3. Funkcja ma obsługiwać zarówno wielkie jak i małe litery\r\n\r\n// 4. Funkcja ma zwracać komunikat gdy podany argument nie jest ciągiem znaków lub jest pusty.\r\n*/\r\n\r\nconst result = 'CEMRCEBTENZBJNAV';\r\nexport function caesar13(sentence) {\r\n    const alphabet = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpRrSsTtUuVvWwXxYyZz';\r\n    console.log(sentence);\r\n};\r\n\r\ncaesar13('PRZEPROGRAMOWANI');","import {caesar13} from './szyfrcezara.js';\r\n\r\nconsole.log(caesar13)"]}