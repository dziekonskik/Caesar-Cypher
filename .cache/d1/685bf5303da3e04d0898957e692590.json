{"id":"szyfrcezara.js","dependencies":[{"name":"D:\\projekty\\Opanuj JavaScript\\Projekty\\Szyfr_Cezara\\package.json","includedInParent":true,"mtime":1588061604401}],"generated":{"js":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.caesar13 = caesar13;\n\n/*\r\nProjekt praktyczny “Szyfr Cezara”\r\n// Szyfr Cezara (szyfr przesuwający) to prosta i popularna technika szyfrowania danych.  \r\n// Opiera się o przesunięcie liter w Alfabecie (obecnie używa się przesunięcia o 13 liter - ROT13).\r\n\r\n// Opis zadania: \r\n\r\n// Stwórz moduł eksportujący z pomocą ES6 Modules funkcję caesar13. Jako parametr funkcja ta ma\r\n// przyjmować ciąg znaków a następnie zwracać zaszyfrowany zgodnie z ROT13. Wykorzystaj powyższy\r\n// przykład działania aby zweryfikować poprawność Twojej funkcji.\r\n\r\n// Wymagania: \r\n\r\n// Po ukończeniu, funkcja ma spełniać następujące wymagania:\r\n\r\n// 1. Funkcja caesar13 ma zwracać zaszyfrowany ciąg znaków, przesunięty o 13 liter (bez polskich znaków).\r\n\r\n// 2. Liczby w ciągu znaków mają nie ulegać zmianie.\r\n\r\n// 3. Funkcja ma obsługiwać zarówno wielkie jak i małe litery\r\n\r\n// 4. Funkcja ma zwracać komunikat gdy podany argument nie jest ciągiem znaków lub jest pusty.\r\n*/\nvar result = 'CEMRCEBTENZBJNAV';\n\nfunction caesar13(sentence) {\n  var alphabet = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpRrSsTtUuVvWwXxYyZz';\n  console.log(sentence);\n}\n\n;\ncaesar13('PRZEPROGRAMOWANI');"},"sourceMaps":{"js":{"mappings":[{"generated":{"line":8,"column":0},"source":"szyfrcezara.js","original":{"line":1,"column":0}},{"generated":{"line":31,"column":0},"source":"szyfrcezara.js","original":{"line":26,"column":0}},{"name":"result","generated":{"line":31,"column":4},"source":"szyfrcezara.js","original":{"line":26,"column":6}},{"generated":{"line":31,"column":10},"source":"szyfrcezara.js","original":{"line":26,"column":12}},{"generated":{"line":31,"column":13},"source":"szyfrcezara.js","original":{"line":26,"column":15}},{"generated":{"line":31,"column":31},"source":"szyfrcezara.js","original":{"line":26,"column":0}},{"generated":{"line":33,"column":0},"source":"szyfrcezara.js","original":{"line":27,"column":7}},{"name":"caesar13","generated":{"line":33,"column":9},"source":"szyfrcezara.js","original":{"line":27,"column":16}},{"generated":{"line":33,"column":17},"source":"szyfrcezara.js","original":{"line":27,"column":7}},{"name":"sentence","generated":{"line":33,"column":18},"source":"szyfrcezara.js","original":{"line":27,"column":25}},{"generated":{"line":33,"column":26},"source":"szyfrcezara.js","original":{"line":27,"column":7}},{"generated":{"line":33,"column":28},"source":"szyfrcezara.js","original":{"line":27,"column":35}},{"generated":{"line":34,"column":0},"source":"szyfrcezara.js","original":{"line":28,"column":4}},{"name":"alphabet","generated":{"line":34,"column":6},"source":"szyfrcezara.js","original":{"line":28,"column":10}},{"generated":{"line":34,"column":14},"source":"szyfrcezara.js","original":{"line":28,"column":18}},{"generated":{"line":34,"column":17},"source":"szyfrcezara.js","original":{"line":28,"column":21}},{"generated":{"line":34,"column":69},"source":"szyfrcezara.js","original":{"line":28,"column":4}},{"name":"console","generated":{"line":35,"column":0},"source":"szyfrcezara.js","original":{"line":29,"column":4}},{"name":"console","generated":{"line":35,"column":2},"source":"szyfrcezara.js","original":{"line":29,"column":4}},{"generated":{"line":35,"column":9},"source":"szyfrcezara.js","original":{"line":29,"column":11}},{"name":"log","generated":{"line":35,"column":10},"source":"szyfrcezara.js","original":{"line":29,"column":12}},{"generated":{"line":35,"column":13},"source":"szyfrcezara.js","original":{"line":29,"column":4}},{"name":"sentence","generated":{"line":35,"column":14},"source":"szyfrcezara.js","original":{"line":29,"column":16}},{"generated":{"line":35,"column":22},"source":"szyfrcezara.js","original":{"line":29,"column":4}},{"generated":{"line":36,"column":0},"source":"szyfrcezara.js","original":{"line":30,"column":1}},{"generated":{"line":38,"column":0},"source":"szyfrcezara.js","original":{"line":30,"column":1}},{"name":"caesar13","generated":{"line":39,"column":0},"source":"szyfrcezara.js","original":{"line":32,"column":0}},{"generated":{"line":39,"column":8},"source":"szyfrcezara.js","original":{"line":32,"column":8}},{"generated":{"line":39,"column":9},"source":"szyfrcezara.js","original":{"line":32,"column":9}},{"generated":{"line":39,"column":27},"source":"szyfrcezara.js","original":{"line":32,"column":8}},{"generated":{"line":39,"column":28},"source":"szyfrcezara.js","original":{"line":32,"column":0}}],"sources":{"szyfrcezara.js":"/*\r\nProjekt praktyczny “Szyfr Cezara”\r\n// Szyfr Cezara (szyfr przesuwający) to prosta i popularna technika szyfrowania danych.  \r\n// Opiera się o przesunięcie liter w Alfabecie (obecnie używa się przesunięcia o 13 liter - ROT13).\r\n\r\n// Opis zadania: \r\n\r\n// Stwórz moduł eksportujący z pomocą ES6 Modules funkcję caesar13. Jako parametr funkcja ta ma\r\n// przyjmować ciąg znaków a następnie zwracać zaszyfrowany zgodnie z ROT13. Wykorzystaj powyższy\r\n// przykład działania aby zweryfikować poprawność Twojej funkcji.\r\n\r\n// Wymagania: \r\n\r\n// Po ukończeniu, funkcja ma spełniać następujące wymagania:\r\n\r\n// 1. Funkcja caesar13 ma zwracać zaszyfrowany ciąg znaków, przesunięty o 13 liter (bez polskich znaków).\r\n\r\n// 2. Liczby w ciągu znaków mają nie ulegać zmianie.\r\n\r\n// 3. Funkcja ma obsługiwać zarówno wielkie jak i małe litery\r\n\r\n// 4. Funkcja ma zwracać komunikat gdy podany argument nie jest ciągiem znaków lub jest pusty.\r\n*/\r\n\r\nconst result = 'CEMRCEBTENZBJNAV';\r\nexport function caesar13(sentence) {\r\n    const alphabet = 'AaBbCcDdEeFfGgHhIiJjKkLlMmNnOoPpRrSsTtUuVvWwXxYyZz';\r\n    console.log(sentence);\r\n};\r\n\r\ncaesar13('PRZEPROGRAMOWANI');"},"lineCount":null}},"error":null,"hash":"9358d104cd573b92f414902f7b644b4b","cacheData":{"env":{}}}